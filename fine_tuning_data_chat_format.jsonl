{"messages": [{"role": "user", "content": "\nYou are a SQL query generation assistant. Given the schema context and user query, generate the corresponding SQL query. Use Snowflake SQL syntax, optimize for performance, and structure the query correctly.\n"}, {"role": "assistant", "content": "\nUnderstood! I will generate an optimized SQL query based on the provided schema context and user query, adhering to Snowflake SQL syntax and performance optimization best practices.\n"}]}
{"messages": [{"role": "user", "content": "Describe use of table 'partner_onboarding_lead_creation' and its schema"}, {"role": "assistant", "content": "The 'partner_onboarding_lead_creation' table has columns: owner_id (number) | Tests: , owner_created_at_ist (timestamp_ntz), supply_created_at_ist (timestamp_ntz), owner_creation_tat_sec (number), partner_onboarding_lead_id (number) | Tests: , lead_mobile (varchar), lead_created_at_ist (timestamp_ntz) | Tests: , uuid (varchar) | Tests: , status (number), owner_driver (boolean), driver_id (number) | Relationships: , language (varchar), onboarding_status (number), training_status (number), training_lang (varchar), termination_ts (timestamp_ntz), terminating_admin_id (number), app_version (number), reg_fee_payment_attempted (boolean), vehicle_number (varchar), driver_onboardee_id (number), geo_region_id (number) | Relationships: , vehicle_id (number) | Relationships: , vehicle_created_at_ist (timestamp_ntz), lead_rank (number), lead_creation_tat_sec (number), reg_fee_paid (boolean), reg_fee_paid_amount (number), reg_fee_paid_at_ist (timestamp_ntz), reg_fee_refunded_amount (number), reg_fee_refunded_at_ist (timestamp_ntz)"}]}
{"messages": [{"role": "user", "content": "Describe use of table 'partner_onboarding_driver_creation' and its schema"}, {"role": "assistant", "content": "The 'partner_onboarding_driver_creation' table has columns: driver_id (number) | Relationships: , driver_created_at_ist (timestamp_ntz), date_of_join (date), active_status (number), partner_owner_id (number), owner_id (number) | Relationships: , supply_created_at_ist (timestamp_ntz), owner_created_at_ist (timestamp_ntz), vehicle_created_at_ist (timestamp_ntz), vehicle_number (varchar), vehicle_id (number) | Relationships: , vehicle_type (varchar), category_segment (varchar), vehicle_mapping (varchar), level0_mapping (varchar), city_name (varchar) | Relationships: , zone (varchar), tier (varchar), lead_created_at_ist (timestamp_ntz), owner_driver (boolean), reg_fee_paid_at_ist (timestamp_ntz), onboarding_status (number), training_status (number), first_dummy_order_allocated_ts_ist (timestamp_ntz), first_dummy_order_completed_ts_ist (timestamp_ntz), first_spot_order_allocated_ts_ist (timestamp_ntz), first_spot_order_completed_ts_ist (timestamp_ntz), dummy_orders_allocated (number), dummy_orders_completed (number), first_30d_orders_allocated (number), first_7d_orders_allocated (number), first_30d_orders_done (number), first_7d_orders_done (number), first_30d_earnings (number), first_7d_earnings (number), vehicle_category (varchar)"}]}
{"messages": [{"role": "user", "content": "Describe use of table 'partner_onboarding_owner_creation' and its schema"}, {"role": "assistant", "content": "The 'partner_onboarding_owner_creation' table has columns: supply_lead_id (number) | Relationships: , mobile (varchar), supply_created_at_ist (timestamp_ntz), supply_lead_rnk (number), owner_id (number) | Relationships: , owner_created_at_ist (timestamp_ntz), owner_id_doc_id (number), pan_card_doc_id (number), owner_selfie_doc_id (number), owner_id_updated_at (timestamp_ntz), pan_card_updated_at (timestamp_ntz), owner_selfie_updated_at (timestamp_ntz), owner_id_num_tries (number), pan_card_num_tries (number), owner_selfie_num_tries (number), aadhar_uploaded (boolean) | Relationships: , pan_uploaded (boolean) | Relationships: , selfie_uploaded (boolean) | Relationships: , owner_creation_tat_sec (number), doc_submission_tat (number)"}]}
{"messages": [{"role": "user", "content": "Describe use of table 'partner_onboarding_vehicle_creation' and its schema"}, {"role": "assistant", "content": "The 'partner_onboarding_vehicle_creation' table has columns: owner_id (number) | Relationships: , owner_created_at_ist (timestamp_ntz), supply_created_at_ist (timestamp_ntz), owner_creation_tat_sec (number), onboarding_vehicle_id (number) | Relationships: , vehicle_created_at_ist (timestamp_ntz), vehicle_number (varchar), body_type (varchar), vehicle_id (number) | Relationships: , vehicle_mapping (varchar), level0_mapping (varchar), vehicle_category (varchar), vehicle_type (varchar), city_name (varchar) | Relationships: , zone (varchar), tier (varchar), vehicle_creation_tat_sec (number), status (number), uuid (varchar), vehicle_rank (number), lead_id (number), vehicle_rc_doc_id (number), fitness_certificate_doc_id (number), vehicle_insurance_doc_id (number), vehicle_tax_doc_id (number), vehicle_puc_doc_id (number), vehicle_rc_updated_at (timestamp_ntz), fitness_certificate_updated_at (timestamp_ntz), vehicle_insurance_updated_at (timestamp_ntz), vehicle_tax_updated_at (timestamp_ntz), vehicle_puc_updated_at (timestamp_ntz), vehicle_rc_num_tries (number), fitness_certificate_num_tries (number), vehicle_insurance_num_tries (number), vehicle_tax_num_tries (number), vehicle_puc_num_tries (number), vehicle_rc_uploaded (boolean) | Relationships: , fitness_certificate_uploaded (boolean) | Relationships: , vehicle_insurance_uploaded (boolean) | Relationships: , vehicle_tax_uploaded (boolean), vehicle_puc_uploaded (boolean) | Relationships:"}]}
{"messages": [{"role": "user", "content": "Describe use of table 'partner_onboarding_document_approval' and its schema"}, {"role": "assistant", "content": "The 'partner_onboarding_document_approval' table has columns: doc_created_at_ist_daywise (timestamp_ntz) | Relationships: , document_name (varchar) | Relationships: , doc_status_id (number) | Relationships: , doc_status (varchar) | Relationships: , actual_actioned_by (varchar), doc_status_reason (varchar), doc_count (number) | Relationships:"}]}
{"messages": [{"role": "user", "content": "This query counts the number of unique leads created, filtering out terminated leads."}, {"role": "assistant", "content": "WITH leads AS ( SELECT pl.partner_onboarding_lead_id, pl.termination_ts FROM mart.partner_onboarding_lead_creation pl WHERE pl.termination_ts IS NULL) SELECT COUNT(DISTINCT partner_onboarding_lead_id) AS leads_added FROM leads;"}]}
{"messages": [{"role": "user", "content": "This query counts the number of leads that have added a vehicle"}, {"role": "assistant", "content": "WITH leads AS (SELECT pl.partner_onboarding_lead_id, pl.termination_ts, pv.onboarding_vehicle_id FROM mart.partner_onboarding_lead_creation pl LEFT JOIN mart.partner_onboarding_vehicle_creation pv ON pl.partner_onboarding_lead_id = pv.lead_id WHERE pl.termination_ts IS NULL) SELECT COUNT(DISTINCT partner_onboarding_lead_id) AS leads_with_vehicle FROM leads WHERE onboarding_vehicle_id IS NOT NULL;"}]}
{"messages": [{"role": "user", "content": "This query counts the number of drivers created from the leads who have completed vehicle onboarding."}, {"role": "assistant", "content": "WITH leads AS (SELECT pl.partner_onboarding_lead_id, pl.termination_ts, pv.onboarding_vehicle_id, pl.driver_id FROM mart.partner_onboarding_lead_creation pl LEFT JOIN mart.partner_onboarding_vehicle_creation pv ON pl.partner_onboarding_lead_id = pv.lead_id WHERE pl.termination_ts IS NULL AND pv.onboarding_vehicle_id IS NOT NULL), drivers AS (SELECT d.driver_id FROM mart.partner_onboarding_driver_creation d JOIN leads l ON d.driver_id = l.driver_id) SELECT COUNT(DISTINCT driver_id) AS drivers_created FROM drivers;"}]}
{"messages": [{"role": "user", "content": "This query counts the number of drivers who are ready to take orders, either by completing a dummy order (for 2-wheelers) or paying the registration fee (for other vehicle categories)"}, {"role": "assistant", "content": "WITH leads AS (SELECT pl.partner_onboarding_lead_id, pl.termination_ts, pv.onboarding_vehicle_id, pl.driver_id, pv.level0_mapping FROM mart.partner_onboarding_lead_creation pl LEFT JOIN mart.partner_onboarding_vehicle_creation pv ON pl.partner_onboarding_lead_id = pv.lead_id WHERE pl.termination_ts IS NULL AND pv.onboarding_vehicle_id IS NOT NULL), drivers AS (SELECT d.driver_id, d.FIRST_DUMMY_ORDER_COMPLETED_TS_IST, d.REG_FEE_PAID_AT_IST FROM mart.partner_onboarding_driver_creation d JOIN leads l ON d.driver_id = l.driver_id) SELECT COUNT(DISTINCT d.driver_id) AS ready_to_order FROM drivers d JOIN leads l ON d.driver_id = l.driver_id WHERE (l.level0_mapping = '2W' AND d.FIRST_DUMMY_ORDER_COMPLETED_TS_IST IS NOT NULL) OR (l.level0_mapping <> '2W' AND d.REG_FEE_PAID_AT_IST IS NOT NULL);"}]}
{"messages": [{"role": "user", "content": "This query counts the number of drivers who have completed their first real order"}, {"role": "assistant", "content": "WITH leads AS (SELECT pl.partner_onboarding_lead_id, pl.termination_ts, pv.onboarding_vehicle_id, pl.driver_id FROM mart.partner_onboarding_lead_creation pl LEFT JOIN mart.partner_onboarding_vehicle_creation pv ON pl.partner_onboarding_lead_id = pv.lead_id WHERE pl.termination_ts IS NULL AND pv.onboarding_vehicle_id IS NOT NULL),drivers AS (SELECT d.driver_id, d.FIRST_SPOT_ORDER_COMPLETED_TS_IST FROM mart.partner_onboarding_driver_creation d JOIN leads l ON d.driver_id = l.driver_id) SELECT COUNT(DISTINCT d.driver_id) AS first_order_completed FROM drivers d WHERE d.FIRST_SPOT_ORDER_COMPLETED_TS_IST IS NOT NULL ), drivers AS ( SELECT d.driver_id FROM mart.partner_onboarding_driver_creation d JOIN leads l ON d.driver_id = l.driver_id) SELECT COUNT(DISTINCT driver_id) AS drivers_created FROM drivers;"}]}
{"messages": [{"role": "user", "content": "This query calculates daily metrics for the lead-to-driver onboarding process, including lead conversion rates, driver creation time (TAT), and percentiles, while analyzing the efficiency and speed of converting leads into drivers based on various criteria like registration fee payment and document readiness."}, {"role": "assistant", "content": "WITH leads AS ( SELECT mart.PARTNER_ONBOARDING_LEAD_CREATION.* EXCLUDE (level0_mapping, vehicle_category, vehicle_mapping, vehicle_type) , mart.partner_onboarding_vehicle_creation.vehicle_category , mart.partner_onboarding_vehicle_creation.level0_mapping , mart.partner_onboarding_vehicle_creation.vehicle_mapping , mart.partner_onboarding_vehicle_creation.vehicle_type , mart.partner_onboarding_vehicle_creation.onboarding_vehicle_id FROM mart.PARTNER_ONBOARDING_LEAD_CREATION JOIN mart.partner_onboarding_vehicle_creation ON mart.PARTNER_ONBOARDING_LEAD_CREATION.partner_onboarding_lead_id = mart.partner_onboarding_vehicle_creation.lead_id ) , drivers AS ( SELECT d.* FROM mart.partner_onboarding_driver_creation d JOIN leads l ON d.driver_id = l.driver_id ) , final AS ( SELECT l.owner_id , l.owner_created_at_ist , l.onboarding_vehicle_id , l.vehicle_created_at_ist , l.level0_mapping , l.vehicle_category , l.vehicle_mapping , l.vehicle_type , l.city_name , l.tier , l.partner_onboarding_lead_id AS onboarding_lead_id , l.lead_created_at_ist , l.owner_driver , l.reg_fee_payment_attempted , l.reg_fee_paid , l.reg_fee_paid_at_ist , CASE WHEN l.VEHICLE_CATEGORY = '2W' THEN l.REG_FEE_PAID_AT_IST WHEN l.VEHICLE_CATEGORY <> '2W' THEN l.LEAD_CREATED_AT_IST END AS ready_to_verify_at_ist , d.driver_created_at_ist , CASE WHEN l.VEHICLE_CATEGORY = '2W' AND d.FIRST_DUMMY_ORDER_COMPLETED_TS_IST IS NOT NULL THEN TRUE WHEN l.VEHICLE_CATEGORY <> '2W' AND l.reg_fee_paid = TRUE THEN TRUE ELSE FALSE END AS ready_to_order , CASE WHEN l.VEHICLE_CATEGORY = '2W' THEN d.FIRST_DUMMY_ORDER_COMPLETED_TS_IST ELSE l.REG_FEE_PAID_AT_IST END AS ready_to_order_at_ist , CASE WHEN DATEDIFF(day, l.lead_created_at_ist, d.driver_created_at_ist) <= 7 THEN TRUE ELSE FALSE END AS driver_cvr_flag , DATEDIFF(hour, l.lead_created_at_ist, l.REG_FEE_PAID_AT_IST) AS reg_fee_payment_tat , DATEDIFF(day, l.lead_created_at_ist, d.driver_created_at_ist) AS driver_creation_tat FROM leads l LEFT JOIN drivers d ON l.driver_id = d.driver_id ) SELECT DATE_TRUNC(day, lead_created_at_ist) AS date , COUNT(DISTINCT onboarding_lead_id) AS leads_added , COUNT(DISTINCT CASE WHEN driver_created_at_ist IS NOT NULL THEN onboarding_lead_id END) AS drivers_added , COUNT(DISTINCT CASE WHEN driver_cvr_flag THEN onboarding_lead_id END) AS drivers_added_cvr , drivers_added/leads_added AS drivers_cvr , drivers_added_cvr/leads_added AS drivers_cvr_criteria , AVG(driver_creation_tat) AS avg_tat , PERCENTILE_CONT(0.5) WITHIN GROUP(ORDER BY driver_creation_tat) AS p50_tat , PERCENTILE_CONT(0.75) WITHIN GROUP(ORDER BY driver_creation_tat) AS p75_tat FROM final GROUP BY 1 ORDER BY 1;"}]}
{"messages": [{"role": "user", "content": "The query counts the distinct number of drivers added per day based on their creation date "}, {"role": "assistant", "content": "SELECT DATE_TRUNC(day, driver_created_at_ist) AS date ,COUNT(DISTINCT driver_id) AS drivers_added FROM mart.partner_onboarding_driver_creation GROUP BY 1"}]}
{"messages": [{"role": "user", "content": "The query calculates the daily number of drivers added, the number of drivers who became active by completing their first spot order within 7 days, and computes the activated conversion rate (CVR) as the ratio of drivers activated to drivers added"}, {"role": "assistant", "content": "WITH drivers AS ( SELECT * FROM mart.partner_onboarding_driver_creation WHERE driver_created_at_ist between '2025-01-01' and '2025-02-01' ) , leads AS ( SELECT mart.PARTNER_ONBOARDING_LEAD_CREATION.* FROM mart.PARTNER_ONBOARDING_LEAD_CREATION JOIN drivers ON mart.PARTNER_ONBOARDING_LEAD_CREATION.driver_id = drivers.driver_id WHERE 1=1 AND mart.PARTNER_ONBOARDING_LEAD_CREATION.termination_ts IS NULL ) , final AS ( SELECT d.driver_id , d.driver_created_at_ist , d.category_segment , l.reg_fee_paid , CASE WHEN DATEDIFF(day, d.driver_created_at_ist, d.FIRST_SPOT_ORDER_COMPLETED_TS_IST) <= 7 THEN TRUE ELSE FALSE END AS active_cvr_flag FROM drivers d LEFT JOIN leads l ON l.driver_id = d.driver_id ) SELECT DATE_TRUNC(day, driver_created_at_ist) AS date , COUNT(DISTINCT driver_id) AS drivers_added , COUNT(DISTINCT CASE WHEN active_cvr_flag THEN driver_id END) AS drivers_activated_cvr , drivers_activated_cvr/drivers_added AS activated_cvr_criteria FROM final GROUP BY 1;"}]}
{"messages": [{"role": "user", "content": "The query calculates the average activation time to first order (TAT) for drivers who are ready to order and complete their first spot order within 7 days, grouped by day. It calculates the time difference between when the driver is ready to order and when the first order is completed"}, {"role": "assistant", "content": "WITH drivers AS ( SELECT * FROM mart.partner_onboarding_driver_creation WHERE driver_created_at_ist between '2025-01-01' and '2025-02-01' ) , leads AS ( SELECT mart.PARTNER_ONBOARDING_LEAD_CREATION.* FROM mart.PARTNER_ONBOARDING_LEAD_CREATION JOIN drivers ON mart.PARTNER_ONBOARDING_LEAD_CREATION.driver_id = drivers.driver_id WHERE 1=1 AND mart.PARTNER_ONBOARDING_LEAD_CREATION.termination_ts IS NULL ) , final AS ( SELECT d.driver_id , d.driver_created_at_ist , d.category_segment , CASE WHEN d.category_segment = '2W' THEN d.FIRST_DUMMY_ORDER_COMPLETED_TS_IST ELSE l.REG_FEE_PAID_AT_IST END AS ready_to_order_at_ist , d.FIRST_SPOT_ORDER_COMPLETED_TS_IST AS first_order_done_at_ist , CASE WHEN DATEDIFF(day, ready_to_order_at_ist, d.FIRST_SPOT_ORDER_COMPLETED_TS_IST) <= 7 THEN TRUE ELSE FALSE END AS ready_cvr_flag , CASE WHEN ready_cvr_flag THEN DATEDIFF(day, ready_to_order_at_ist, d.FIRST_SPOT_ORDER_COMPLETED_TS_IST) END AS activation_tat FROM drivers d LEFT JOIN leads l ON l.driver_id = d.driver_id ) SELECT DATE_TRUNC(day, driver_created_at_ist) AS date , AVG(activation_tat) AS avg_tat FROM final GROUP BY 1 ORDER BY 1 ;"}]}
{"messages": [{"role": "user", "content": "This query counts the number of distinct activated drivers (where ACTIVE_STATUS = 1) for each vehicle category"}, {"role": "assistant", "content": "SELECT VEHICLE_CATEGORY, COUNT(DISTINCT DRIVER_ID) AS ACTIVATED_DRIVERS_COUNT FROM mart.partner_onboarding_driver_creation WHERE ACTIVE_STATUS = 1 GROUP BY VEHICLE_CATEGORY ORDER BY ACTIVATED_DRIVERS_COUNT DESC;"}]}
{"messages": [{"role": "user", "content": "This query answers what are the drivers who completed their first dummy order and when did they do so, along with their vehicle category"}, {"role": "assistant", "content": "SELECT DRIVER_ID, FIRST_DUMMY_ORDER_COMPLETED_TS_IST, VEHICLE_CATEGORY FROM mart.partner_onboarding_driver_creation WHERE FIRST_DUMMY_ORDER_COMPLETED_TS_IST IS NOT NULL ORDER BY FIRST_DUMMY_ORDER_COMPLETED_TS_IST;"}]}
{"messages": [{"role": "user", "content": "This query will return the vehicle type and the average earnings for drivers within their first 30 days of activation, grouped by each vehicle type."}, {"role": "assistant", "content": "select vehicle_type,avg(first_30d_earnings) from mart.partner_onboarding_driver_creation group by vehicle_type;"}]}
{"messages": [{"role": "user", "content": "This query retrieves the driver_id of all drivers who have completed more than 30 orders within their first 30 days of joining."}, {"role": "assistant", "content": "select driver_id from mart.partner_onboarding_driver_creation where first_30d_orders_done>30;"}]}
{"messages": [{"role": "user", "content": "This query measures how many owners have been onboarded in each month."}, {"role": "assistant", "content": "select DATE_TRUNC(month, owner_created_at_ist) AS date,count(distinct owner_id) as owners from mart.partner_onboarding_owner_creation group by 1;"}]}
{"messages": [{"role": "user", "content": "This query finds the number of vehicle owners who onboarded either a single vehicle or multiple vehicles on a given date, categorizing them by whether they onboarded one type of vehicle or multiple types"}, {"role": "assistant", "content": "WITH owners AS ( SELECT * FROM mart.PARTNER_ONBOARDING_OWNER_CREATION ) , vehicles AS ( SELECT pv.* FROM mart.partner_onboarding_vehicle_creation pv JOIN owners o ON pv.owner_id = o.owner_id QUALIFY ROW_NUMBER() OVER(PARTITION BY pv.lead_id ORDER BY pv.vehicle_created_at_ist DESC) = 1 ) , final AS ( SELECT o.owner_id , o.owner_created_at_ist , v.onboarding_vehicle_id , v.vehicle_category FROM owners o LEFT JOIN vehicles v ON o.owner_id = v.owner_id ) , owner_vehicles AS ( SELECT DATE_TRUNC(day, owner_created_at_ist) AS date , owner_id , CASE WHEN COUNT(DISTINCT VEHICLE_CATEGORY) > 1 THEN 'Multiple Vehicle Types' ELSE 'One Vehicle Type' END AS vehicle_types_added , CASE WHEN COUNT(DISTINCT onboarding_vehicle_id) > 1 THEN 'Multiple Vehicles' ELSE 'Single Vehicle' END AS vehicles_added FROM final WHERE 1=1 AND onboarding_vehicle_id IS NOT NULL GROUP BY 1,2 ) SELECT date , vehicles_added , COUNT(DISTINCT owner_id) AS vehicles FROM owner_vehicles GROUP BY 1,2;"}]}
{"messages": [{"role": "user", "content": "The query calculates the daily count of distinct owners based on the number of vehicles they added, categorizing them into 1 vehicle, 2-10 vehicles, or more than 10 vehicles."}, {"role": "assistant", "content": "WITH owners AS ( SELECT * FROM mart.PARTNER_ONBOARDING_OWNER_CREATION ) , vehicles AS ( SELECT pv.* FROM mart.partner_onboarding_vehicle_creation pv ) , final AS ( SELECT o.owner_id , o.owner_created_at_ist , v.onboarding_vehicle_id FROM owners o LEFT JOIN vehicles v ON o.owner_id = v.owner_id ) , owner_vehicles AS ( SELECT DATE_TRUNC(day, owner_created_at_ist) AS date , owner_id , COUNT(DISTINCT onboarding_vehicle_id) AS vehicles_added FROM final WHERE 1=1 AND onboarding_vehicle_id IS NOT NULL GROUP BY 1,2 ) SELECT date , CASE WHEN vehicles_added = 1 THEN '1' WHEN vehicles_added BETWEEN 2 AND 10 THEN '2-10' WHEN vehicles_added > 10 THEN '10+' END AS vehicles_added , COUNT(DISTINCT owner_id) AS vehicles FROM owner_vehicles GROUP BY 1,2 order by 1 desc,2 "}]}
{"messages": [{"role": "user", "content": "The query calculates the daily count of distinct owners onboarded, owners who added vehicles, and owners who added vehicles within 7 days of onboarding, along with conversion rates for total vehicles added per owner and vehicles added within the 7-day criterion."}, {"role": "assistant", "content": "WITH owners AS ( SELECT * FROM mart.PARTNER_ONBOARDING_OWNER_CREATION ) , vehicles AS ( SELECT pv.* FROM mart.partner_onboarding_vehicle_creation pv ) , final AS ( SELECT o.supply_lead_id , o.supply_created_at_ist , o.owner_id , o.owner_created_at_ist , v.onboarding_vehicle_id , v.vehicle_created_at_ist , v.level0_mapping , v.vehicle_category , v.vehicle_type , v.city_name , v.tier , CASE WHEN DATEDIFF(day, o.owner_created_at_ist, v.vehicle_created_at_ist) <= 7 THEN TRUE ELSE FALSE END AS vehicle_cvr_flag FROM owners o LEFT JOIN vehicles v ON o.owner_id = v.owner_id ) SELECT DATE_TRUNC(day, owner_created_at_ist) AS date , COUNT(DISTINCT owner_id) AS owners , COUNT(DISTINCT CASE WHEN vehicle_created_at_ist IS NOT NULL THEN owner_id END) AS vehicles , COUNT(DISTINCT CASE WHEN vehicle_cvr_flag THEN owner_id END) AS vehicles_cvr , DIV0(vehicles, owners) AS owner_to_vehicle_cvr , DIV0(vehicles_cvr, owners) AS owner_to_vehicle_cvr_criteria FROM final WHERE 1=1 GROUP BY 1 ORDER BY 1 DESC ;"}]}
{"messages": [{"role": "user", "content": "The query retrieves supply leads with no corresponding owner, showing their mobile number, supply creation date, and the reason for non-conversion based on missing Aadhar, PAN, or Selfie documents (or Other Issues if none are missing)."}, {"role": "assistant", "content": "SELECT supply_lead_id, mobile, supply_created_at_ist, CASE -- WHEN owner_id IS NULL THEN 'No Owner Created' WHEN aadhar_uploaded = FALSE THEN 'Missing Aadhar' WHEN pan_uploaded = FALSE THEN 'Missing PAN' WHEN selfie_uploaded = FALSE THEN 'Missing Selfie' ELSE 'Other Issues' END AS non_conversion_reason FROM mart.partner_onboarding_owner_creation WHERE owner_id IS NULL;"}]}
{"messages": [{"role": "user", "content": "This query measures how many vehicles have been registered"}, {"role": "assistant", "content": "SELECT COUNT(DISTINCT onboarding_vehicle_id) AS vehicles_added FROM mart.partner_onboarding_vehicle_creation;"}]}
{"messages": [{"role": "user", "content": "This query counts how many vehicles have an associated lead creation record"}, {"role": "assistant", "content": "SELECT COUNT(DISTINCT pv.onboarding_vehicle_id) AS vehicles_with_leads FROM mart.partner_onboarding_vehicle_creation pv JOIN mart.partner_onboarding_lead_creation pl ON pl.partner_onboarding_lead_id = pv.lead_id WHERE pl.termination_ts IS NULL;"}]}
{"messages": [{"role": "user", "content": "This query tracks how many vehicles have an associated driver"}, {"role": "assistant", "content": "SELECT COUNT(DISTINCT pd.driver_id) AS drivers_created FROM mart.partner_onboarding_vehicle_creation pv JOIN mart.partner_onboarding_lead_creation pl ON pl.partner_onboarding_lead_id = pv.lead_id JOIN mart.partner_onboarding_driver_creation pd ON pl.driver_id = pd.driver_id;"}]}
{"messages": [{"role": "user", "content": "This query retrieves the monthly count of unique vehicles added and unique owners, grouped by level0_mapping (vehicle category), and orders the results by the number of vehicles added in ascending order."}, {"role": "assistant", "content": "SELECT DATE_TRUNC(month, vehicle_created_at_ist) AS date , level0_mapping , COUNT(DISTINCT onboarding_vehicle_id) AS vehicles_added , COUNT(DISTINCT owner_id) AS owners FROM prod_eldoria.mart.partner_onboarding_vehicle_creation GROUP BY 1,2 ORDER BY 3;"}]}
{"messages": [{"role": "user", "content": "This query retrieves the total number of vehicles onboarded per city, ranking cities in descending order based on the number of onboarded vehicles."}, {"role": "assistant", "content": "SELECT city_name, COUNT(onboarding_vehicle_id) AS total_vehicles_onboarded FROM prod_eldoria.mart.partner_onboarding_vehicle_creation GROUP BY city_name ORDER BY total_vehicles_onboarded DESC"}]}
{"messages": [{"role": "user", "content": "This query calculates the daily vehicle-to-lead conversion rate, including the percentage of leads created within 7 days of vehicle onboarding."}, {"role": "assistant", "content": "WITH vehicles AS ( SELECT partner_onboarding_vehicle_creation.* EXCLUDE supply_created_at_ist , po.supply_created_at_ist , po.supply_lead_id FROM mart.partner_onboarding_vehicle_creation JOIN mart.PARTNER_ONBOARDING_OWNER_CREATION po ON partner_onboarding_vehicle_creation.owner_id = po.owner_id QUALIFY ROW_NUMBER() OVER(PARTITION BY partner_onboarding_vehicle_creation.lead_id ORDER BY partner_onboarding_vehicle_creation.vehicle_created_at_ist DESC) = 1 ) , leads AS ( SELECT l.* FROM mart.PARTNER_ONBOARDING_LEAD_CREATION l JOIN vehicles v ON l.partner_onboarding_lead_id = v.lead_id WHERE 1=1 AND l.termination_ts IS NULL -- filtering for first lead submitted by supply leads QUALIFY ROW_NUMBER() OVER(PARTITION BY l.owner_id ORDER BY l.LEAD_CREATED_AT_IST) = 1 ) , final AS ( SELECT v.supply_lead_id , v.supply_created_at_ist , v.owner_id , v.owner_created_at_ist , v.onboarding_vehicle_id , v.vehicle_created_at_ist , v.level0_mapping , v.vehicle_category , v.vehicle_mapping , v.vehicle_type , v.city_name , v.tier , l.partner_onboarding_lead_id AS onboarding_lead_id , l.lead_created_at_ist , l.owner_driver , CASE WHEN DATEDIFF(day, v.vehicle_created_at_ist, l.lead_created_at_ist) <= 7 THEN TRUE ELSE FALSE END AS lead_cvr_flag , DATEDIFF(minute, v.vehicle_created_at_ist, l.lead_created_at_ist) AS lead_creation_tat FROM vehicles v LEFT JOIN leads l ON v.lead_id = l.partner_onboarding_lead_id ) SELECT DATE_TRUNC(day, vehicle_created_at_ist) AS date , COUNT(DISTINCT onboarding_vehicle_id) AS vehicles_added , COUNT(DISTINCT onboarding_lead_id) AS leads_added , COUNT(DISTINCT CASE WHEN lead_cvr_flag THEN onboarding_lead_id END) AS leads_added_cvr , leads_added/vehicles_added AS leads_cvr , leads_added_cvr/vehicles_added AS leads_cvr_criteria FROM final GROUP BY 1 ORDER BY 1;"}]}
{"messages": [{"role": "user", "content": "This query finds the daily count of vehicles added and unique owners for 2W (two-wheelers), grouped by body type (bike/scooter)."}, {"role": "assistant", "content": "SELECT DATE_TRUNC(day, vehicle_created_at_ist) AS date , LOWER(body_type) AS body_type , COUNT(DISTINCT onboarding_vehicle_id) AS vehicles_added , COUNT(DISTINCT owner_id) AS owners FROM mart.partner_onboarding_vehicle_creation WHERE 1=1 AND level0_mapping = '2W' GROUP BY 1,2;"}]}
{"messages": [{"role": "user", "content": "This query calculates the average, median (P50), and 75th percentile (P75) turnaround time (TAT) in hours for drivers created within 7 days of vehicle creation, grouped by date."}, {"role": "assistant", "content": "WITH vehicles AS ( SELECT partner_onboarding_vehicle_creation.* EXCLUDE supply_created_at_ist , po.supply_created_at_ist , po.supply_lead_id FROM mart.partner_onboarding_vehicle_creation JOIN mart.PARTNER_ONBOARDING_OWNER_CREATION po ON partner_onboarding_vehicle_creation.owner_id = po.owner_id QUALIFY ROW_NUMBER() OVER(PARTITION BY partner_onboarding_vehicle_creation.lead_id ORDER BY partner_onboarding_vehicle_creation.vehicle_created_at_ist DESC) = 1 ) , leads AS ( SELECT l.* FROM mart.PARTNER_ONBOARDING_LEAD_CREATION l JOIN vehicles v ON l.partner_onboarding_lead_id = v.lead_id WHERE 1=1 AND l.termination_ts IS NULL -- filtering for first lead submitted by supply leads QUALIFY ROW_NUMBER() OVER(PARTITION BY l.owner_id ORDER BY l.LEAD_CREATED_AT_IST) = 1 ) , drivers AS ( SELECT d.* FROM mart.partner_onboarding_driver_creation d JOIN leads l ON d.driver_id = l.driver_id ) , final AS ( SELECT v.supply_lead_id , v.supply_created_at_ist , v.owner_id , v.owner_created_at_ist , v.onboarding_vehicle_id , v.vehicle_created_at_ist , v.level0_mapping , v.vehicle_category , v.vehicle_mapping , v.vehicle_type , v.city_name , v.tier , l.partner_onboarding_lead_id AS onboarding_lead_id , l.lead_created_at_ist , l.owner_driver , d.driver_created_at_ist , CASE WHEN DATEDIFF(day, v.vehicle_created_at_ist, d.driver_created_at_ist) <= 7 THEN TRUE ELSE FALSE END AS driver_cvr_flag , CASE WHEN driver_cvr_flag THEN DATEDIFF(hour, v.vehicle_created_at_ist, d.driver_created_at_ist) END AS driver_creation_tat FROM vehicles v LEFT JOIN leads l ON v.lead_id = l.partner_onboarding_lead_id LEFT JOIN drivers d ON l.driver_id = d.driver_id ) SELECT DATE_TRUNC(day, vehicle_created_at_ist)::DATE AS date , AVG(driver_creation_tat) AS avg_tat , PERCENTILE_CONT(0.5) WITHIN GROUP(ORDER BY driver_creation_tat) AS p50_tat , PERCENTILE_CONT(0.75) WITHIN GROUP(ORDER BY driver_creation_tat) AS p75_tat FROM final GROUP BY 1 ORDER BY 1 ;"}]}
{"messages": [{"role": "user", "content": "The query will return the document type (DOCUMENT_NAME) and the count of documents submitted for each type, ordered by the document type with the highest submission count. "}, {"role": "assistant", "content": "SELECT DOCUMENT_NAME, COUNT(DOC_COUNT) AS DOCUMENT_SUBMITTED_COUNT FROM mart.partner_onboarding_document_approval WHERE DOC_STATUS_ID IS NOT NULL GROUP BY DOCUMENT_NAME ORDER BY DOCUMENT_SUBMITTED_COUNT DESC;"}]}
{"messages": [{"role": "user", "content": "The query calculates the daily number of drivers added, the number of drivers who became active by completing their first spot order within 7 days, and computes the activated conversion rate (CVR) as the ratio of drivers activated to drivers added"}, {"role": "assistant", "content": "SELECT DOC_STATUS, COUNT(DOC_COUNT) AS DOCUMENT_COUNT FROM mart.partner_onboarding_document_approval WHERE DOC_STATUS IS NOT NULL GROUP BY DOC_STATUS ORDER BY DOCUMENT_COUNT DESC;"}]}
{"messages": [{"role": "user", "content": "TThis query will return the document approval type (Auto, Manual, Null, or 'Other') and the count of documents for each type, ordered by the highest count."}, {"role": "assistant", "content": "SELECT CASE WHEN ACTUAL_ACTIONED_BY IS NULL THEN 'Null' WHEN ACTUAL_ACTIONED_BY = 'auto' THEN 'Auto' WHEN ACTUAL_ACTIONED_BY = 'manual' THEN 'Manual' ELSE 'Other' END AS DOCUMENT_APPROVAL_TYPE, COUNT(DOC_COUNT) AS DOCUMENT_COUNT FROM mart.partner_onboarding_document_approval GROUP BY DOCUMENT_APPROVAL_TYPE ORDER BY DOCUMENT_COUNT DESC;"}]}
{"messages": [{"role": "user", "content": "The query will return the document name, the number of approved documents, the total documents submitted, and the approval rate (as a percentage) for each document type, ordered by the highest approval rate."}, {"role": "assistant", "content": "SELECT DOCUMENT_NAME, COUNT(CASE WHEN DOC_STATUS = 'Accepted' THEN 1 END) AS APPROVED_DOCUMENTS, COUNT(DOC_COUNT) AS TOTAL_DOCUMENTS, (COUNT(CASE WHEN DOC_STATUS = 'Accepted' THEN 1 END) * 100.0) / COUNT(DOC_COUNT) AS APPROVAL_RATE FROM mart.partner_onboarding_document_approval GROUP BY DOCUMENT_NAME ORDER BY APPROVAL_RATE DESC;"}]}
{"messages": [{"role": "user", "content": "The query will return the reason wise rate of documents rejection."}, {"role": "assistant", "content": "SELECT DOC_STATUS_REASON, COUNT(DOC_COUNT) AS REJECTED_DOCUMENTS, (COUNT(DOC_COUNT) * 100.0) / (SELECT COUNT(*) FROM mart.partner_onboarding_document_approval where DOC_STATUS = 'Rejected' ) AS rejection_rate FROM mart.partner_onboarding_document_approval WHERE DOC_STATUS = 'Rejected' GROUP BY DOC_STATUS_REASON ORDER BY REJECTION_PERCENTAGE DESC;"}]}
